import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
from io import BytesIO
import tempfile
import os
from fpdf import FPDF
from math import pi

# ======================
# CONSTANTEN
# ======================
SCORE_LEGEND = {
    "Ruimtelijke Inpassing": {
        1: "Locatie in strijd met het bestemmingsplan, geen geschikte infrastructuur. Grote aanpassingen nodig.",
        2: "Gedeeltelijke overeenkomst met bestemmingsplan, beperkte infrastructuur. Aanzienlijke aanpassingen vereist.",
        3: "Redelijke overeenkomst met bestemmingsplan, voldoende infrastructuur. Enkele uitdagingen.",
        4: "Overeenstemming met bestemmingsplan, goede infrastructuur. Kleine aanpassingen mogelijk.",
        5: "Volledige overeenstemming met bestemmingsplan, uitstekende infrastructuur. Geen obstakels."
    },
    "Milieueisen": {
        1: "Ernstige bodemverontreiniging of andere milieu-uitdagingen. Grote sanering vereist.",
        2: "Matige milieukwesties, zoals bodemverontreiniging of kwetsbare natuur. Sanering nodig.",
        3: "Redelijke milieukwaliteit, enkele kleine problemen. Duurzaamheidsmaatregelen mogelijk.",
        4: "Goed milieu, voldoet aan meeste eisen. Weinig tot geen milieubelemmeringen.",
        5: "Volledig milieuvriendelijk, voldoet aan duurzaamheidsnormen zoals BREEAM-NL. Geen problemen."
    },
    "Veiligheid en Gezondheid": {
        1: "Grote veiligheidsrisico's (bijv. nabij gevaarlijke stoffen). Onveilig voor ontwikkeling.",
        2: "Matige risico's, zoals nabijheid van risicovolle industrie. Extra maatregelen nodig.",
        3: "Voldoet aan normen, enkele kleine risico's die beheersbaar zijn.",
        4: "Volledig veilig, met enkele preventieve maatregelen mogelijk.",
        5: "Geen veiligheidsrisico's, volledig gezond en voldoet aan alle voorschriften."
    },
    "Participatie en Draagvlak": {
        1: "Sterke tegenstand van lokale gemeenschap of gemeente. Geen draagvlak.",
        2: "Beperkte steun, enkele bezwaren. Juridische of politieke obstakels mogelijk.",
        3: "Gemengd draagvlak, zorgen moeten nog worden opgelost.",
        4: "Brede steun, meeste zorgen opgelost.",
        5: "Sterke steun van alle betrokkenen, geen bezwaren."
    },
    "Duurzaamheid en Klimaatadaptatie": {
        1: "Locatie niet klimaatbestendig, geen maatregelen tegen klimaatproblemen.",
        2: "Enkele klimaatproblemen (bijv. wateroverlast). Grote aanpassingen nodig.",
        3: "Redelijk klimaatbestendig, extra maatregelen mogelijk.",
        4: "Goed voorbereid op klimaatverandering, voldoet aan duurzaamheidseisen.",
        5: "Volledig klimaatbestendig, voldoet aan de hoogste duurzaamheidsnormen."
    },
    "Technische en Financiële Haalbaarheid": {
        1: "Technisch moeilijk te ontwikkelen, hoge kosten en obstakels.",
        2: "Technische en financiële uitdagingen, haalbaarheid beperkt.",
        3: "Technisch haalbaar, enkele uitdagingen en extra kosten.",
        4: "Technisch goed haalbaar, lage kosten en weinig uitdagingen.",
        5: "Volledig technisch en financieel haalbaar, geen obstakels."
    }
}

SCORE_COLORS = {
    1: "#ff6b6b",  # Donkerrood
    2: "#ffa502",  # Oranje
    3: "#ffd166",  # Geel
    4: "#06d6a0",  # Lichtgroen
    5: "#1b9e75"   # Donkergroen
}

# ======================
# PDF HULPFUNCTIES
# ======================
def fig_to_bytes(fig):
    """Converteer matplotlib figuur naar tijdelijk bestand"""
    temp_file = tempfile.NamedTemporaryFile(suffix='.png', delete=False)
    fig.savefig(temp_file.name, format='png', dpi=300, bbox_inches='tight')
    plt.close(fig)
    return temp_file.name

def generate_clean_csv(df):
    """Genereer een goed geformatteerde CSV"""
    # Maak een kopie om het origineel niet te wijzigen
    export_df = df.copy()
    
    # Gebruik puntkomma als scheidingsteken voor betere compatibiliteit
    csv = export_df.to_csv(index=False, sep=';', encoding='utf-8')
    return csv.encode('utf-8')

def generate_pdf(locatie):
    """Genereer een compleet PDF rapport met visualisaties en totaalscore"""
    try:
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=16, style='B')
        
        # Titelpagina
        pdf.cell(0, 20, txt=f"Locatie Rapport: {locatie}", ln=1, align='C')
        pdf.set_font("Arial", size=12)
        pdf.cell(0, 10, txt=f"Datum: {datetime.now().strftime('%d-%m-%Y %H:%M')}", ln=1)
        pdf.ln(20)
        
        # Locatiegegevens
        loc_data = st.session_state.df[st.session_state.df["Locatie"] == locatie].iloc[0]
        
        # 1. Scoretabel + Totaalscore
        pdf.set_font("Arial", size=14, style='B')
        pdf.cell(0, 10, txt="1. Score Overzicht", ln=1)
        pdf.set_font("Arial", size=10)
        
        # Bereken totaalscore
        scores = [loc_data[criterium] for criterium in SCORE_LEGEND.keys()]
        totaalscore = sum(scores)
        max_score = len(SCORE_LEGEND) * 5
        
        # Voeg totaalscore toe boven de tabel
        pdf.set_font("Arial", size=12, style='B')
        pdf.cell(0, 10, txt=f"Totaalscore: {totaalscore}/{max_score} ({totaalscore/max_score:.0%})", ln=1)
        pdf.set_font("Arial", size=10)
        
        # Tabel met scores
        col_width = pdf.w / 3
        row_height = pdf.font_size * 2
        
        for criterium in SCORE_LEGEND.keys():
            score = loc_data[criterium]
            pdf.set_fill_color(*hex_to_rgb(SCORE_COLORS[score]))
            pdf.cell(col_width, row_height, criterium, border=1, fill=True)
            pdf.cell(col_width, row_height, f"Score: {score}/5", border=1)
            pdf.cell(col_width, row_height, SCORE_LEGEND[criterium][score][:50]+"...", border=1, ln=1)
        
        pdf.ln(10)
        
        # 2. Grafieken
        pdf.set_font("Arial", size=14, style='B')
        pdf.cell(0, 10, txt="2. Visualisaties", ln=1)
        
        # Staafdiagram
        fig = create_bar_chart(locatie)
        img_path = fig_to_bytes(fig)
        pdf.image(img_path, x=10, w=pdf.w-20)
        plt.close(fig)
        
        # Voeg scorebalk toe
        pdf.set_font("Arial", size=10)
        pdf.cell(0, 10, txt="Score voortgang:", ln=1)
        pdf.set_fill_color(200, 200, 200)  # Grijze achtergrond
        pdf.cell(pdf.w-20, 10, "", border=1, fill=True)
        pdf.set_fill_color(*hex_to_rgb(SCORE_COLORS[5]))  # Groene voortgang
        pdf.cell((pdf.w-20)*(totaalscore/max_score), 10, "", fill=True, ln=1)
        
        # Radarplot (als er meerdere locaties zijn)
        if len(st.session_state.df) > 1:
            fig = create_radar_chart(st.session_state.df, [locatie] + 
                                   [l for l in st.session_state.df["Locatie"].unique() if l != locatie][:2])
            img_path = fig_to_bytes(fig)
            pdf.add_page()
            pdf.image(img_path, x=10, w=pdf.w-20)
            plt.close(fig)
        
        # 3. Details
        pdf.add_page()
        pdf.set_font("Arial", size=14, style='B')
        pdf.cell(0, 10, txt="3. Details", ln=1)
        pdf.set_font("Arial", size=10)
        pdf.multi_cell(0, 8, txt=f"Adres: {loc_data.get('Adres', 'Onbekend')}")
        pdf.ln(5)
        pdf.multi_cell(0, 8, txt=f"Opmerkingen: {loc_data.get('Opmerkingen', 'Geen')}")
        
        # Opschonen
        if os.path.exists(img_path):
            os.unlink(img_path)
        
        return pdf.output(dest="S").encode("latin1")
    
    except Exception as e:
        st.error(f"Fout bij genereren PDF: {str(e)}")
        return None

def hex_to_rgb(hex_color):
    """Converteer hex kleur naar RGB tuple"""
    hex_color = hex_color.lstrip('#')
    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))

def create_bar_chart(locatie):
    """Maak staafdiagram voor PDF"""
    fig, ax = plt.subplots(figsize=(10, 5))
    data = st.session_state.df[st.session_state.df["Locatie"] == locatie][list(SCORE_LEGEND.keys())].T
    data.plot(kind='bar', ax=ax, color=[SCORE_COLORS[x] for x in data.values[0]])
    plt.title(f"Scores voor {locatie}")
    plt.xticks(rotation=45)
    plt.tight_layout()
    return fig

def create_radar_chart(df, locaties):
    """Maak radarplot voor locatievergelijking"""
    categories = list(SCORE_LEGEND.keys())
    N = len(categories)
    
    fig = plt.figure(figsize=(8, 8))
    ax = fig.add_subplot(111, polar=True)
    
    for loc in locaties:
        values = df[df["Locatie"] == loc][categories].values.flatten().tolist()
        values += values[:1]
        angles = [n / float(N) * 2 * pi for n in range(N)]
        angles += angles[:1]
        ax.plot(angles, values, linewidth=1, linestyle='solid', label=loc)
        ax.fill(angles, values, alpha=0.1)
    
    ax.set_theta_offset(pi / 2)
    ax.set_theta_direction(-1)
    plt.xticks(angles[:-1], categories)
    ax.set_rlabel_position(0)
    plt.ylim(0, 5)
    plt.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1))
    return fig

# ======================
# DATA INITIALISATIE
# ======================
if 'df' not in st.session_state:
    st.session_state.df = pd.DataFrame(columns=["Locatie", "Datum"] + list(SCORE_LEGEND.keys()))
    st.session_state.locatie_toevoegen = False

# ======================
# LOCATIE TOEVOEGEN FORMULIER
# ======================
def toon_locatie_formulier():
    with st.form(key='locatie_form'):
        st.subheader("Nieuwe locatie toevoegen")
        naam = st.text_input("Locatienaam*")
        datum = st.date_input("Datum*", datetime.now())
        adres = st.text_input("Adres")
        opmerkingen = st.text_area("Opmerkingen")
        
        submitted = st.form_submit_button("Locatie toevoegen")
        if submitted:
            if not naam:
                st.error("Locatienaam is verplicht")
            else:
                nieuwe_locatie = {
                    "Locatie": naam,
                    "Datum": datum.strftime("%Y-%m-%d"),
                    "Adres": adres,
                    "Opmerkingen": opmerkingen
                }
                # Voeg standaard scores toe (3 voor elk criterium)
                for criterium in SCORE_LEGEND.keys():
                    nieuwe_locatie[criterium] = 3
                
                # Voeg toe aan dataframe
                st.session_state.df = pd.concat([st.session_state.df, pd.DataFrame([nieuwe_locatie])], ignore_index=True)
                st.session_state.locatie_toevoegen = False
                st.rerun()

# ======================
# PAGINA LAYOUT - TABBEN
# ======================
st.set_page_config(layout="wide")
tab1, tab2, tab3 = st.tabs(["🏠 Locatie Beoordelen", "📊 Locaties Vergelijken", "➕ Locatie Toevoegen"])

with tab3:
    # ======================
    # TAB 3: LOCATIE TOEVOEGEN
    # ======================
    st.title("➕ Nieuwe Locatie Toevoegen")
    toon_locatie_formulier()
    
    # Toon bestaande locaties
    if not st.session_state.df.empty:
        st.subheader("Bestaande locaties")
        st.dataframe(
            st.session_state.df[["Locatie", "Datum", "Adres"]],
            hide_index=True,
            use_container_width=True
        )

with tab1:
    # ======================
    # TAB 1: SCORE-INVOER PER LOCATIE
    # ======================
    st.title("📍 Locatie Beoordelen")
    
    if st.session_state.df.empty:
        st.warning("Voeg eerst een locatie toe via het '➕ Locatie Toevoegen' tabblad")
    else:
        selected_location = st.selectbox(
            "Selecteer locatie", 
            st.session_state.df["Locatie"],
            key="loc_select"
        )
        
        # Toon locatiedetails
        locatie_details = st.session_state.df[st.session_state.df["Locatie"] == selected_location].iloc[0]
        with st.expander("📌 Locatiedetails"):
            st.write(f"**Datum:** {locatie_details['Datum']}")
            if pd.notna(locatie_details['Adres']):
                st.write(f"**Adres:** {locatie_details['Adres']}")
            if pd.notna(locatie_details['Opmerkingen']):
                st.write(f"**Opmerkingen:** {locatie_details['Opmerkingen']}")
        
        # Klikbare score-invoer voor ALLE criteria
        st.subheader("📋 Criteria Beoordelen")
        for criterium, scores in SCORE_LEGEND.items():
            current_score = locatie_details[criterium]
            
            st.markdown(f"**{criterium}**")
            cols = st.columns(5)
            for score, uitleg in scores.items():
                with cols[score-1]:
                    if st.button(
                        f"⭐{score}\n{uitleg}",
                        key=f"btn_{criterium}_{score}",
                        help=uitleg,
                        type="primary" if score == current_score else "secondary"
                    ):
                        loc_index = st.session_state.df[st.session_state.df["Locatie"] == selected_location].index[0]
                        st.session_state.df.at[loc_index, criterium] = score
                        st.rerun()
            st.markdown("---")
        
        # Huidige scores weergeven
        st.subheader("📈 Huidige Beoordeling")
        current_data = st.session_state.df[st.session_state.df["Locatie"] == selected_location].set_index("Locatie")[list(SCORE_LEGEND.keys())].T

        # Maak een nieuwe DataFrame voor styling
        styled_data = pd.DataFrame({
            'Criterium': current_data.index,
            'Score': current_data.iloc[:, 0]  # Neem de eerste (en enige) kolom
        })
        
        # Toon de gestylete data
        st.dataframe(
            styled_data.style.apply(
                lambda x: [f'background-color: {SCORE_COLORS[x["Score"]]}'] * len(x),  # Apply to all columns
                axis=1
            ),
            hide_index=True,
            use_container_width=True
        )
        
        # Bereken de totaalscore door de scores per criterium bij elkaar op te tellen
        totaalscore = current_data.sum().sum()  # Optelt de waarden over alle criteria
        max_score = len(SCORE_LEGEND) * 5

        # Totaalscore weergave
        col_a, col_b = st.columns(2)
        with col_a:
            st.metric("Totaalscore", f"{totaalscore}/{max_score}")
        with col_b:
            st.metric("Gemiddelde", f"{current_data.mean().mean():.1f} ⭐")

        # Voortgangsbalk
        progress_value = totaalscore / max_score
        progress_value = min(max(progress_value, 0.0), 1.0)
        st.progress(progress_value, text=f"{progress_value:.0%} van maximale score")

with tab2:
    # ======================
    # TAB 2: LOCATIE VERGELIJKING
    # ======================
    st.title("📊 Locaties Vergelijken")
    
    if st.session_state.df.empty:
        st.warning("Voeg eerst locaties toe via het '➕ Locatie Toevoegen' tabblad")
    else:
        # Multi-select voor locaties
        selected_locs = st.multiselect(
            "Selecteer locaties om te vergelijken",
            options=st.session_state.df["Locatie"],
            default=st.session_state.df["Locatie"].tolist()[:2] if len(st.session_state.df) > 1 else st.session_state.df["Locatie"].tolist()
        )
        
        if len(selected_locs) > 0:
            # Vergelijkingstabel
            st.subheader("📋 Scorevergelijking")
            comparison_df = st.session_state.df[st.session_state.df["Locatie"].isin(selected_locs)].set_index("Locatie")[list(SCORE_LEGEND.keys())].T
            st.dataframe(
                comparison_df.style
                .apply(lambda x: [f'background-color: {SCORE_COLORS[v]}' for v in x])
                .highlight_max(axis=1, color="#1b9e75")
                .highlight_min(axis=1, color="#ff6b6b"),
                use_container_width=True
            )
            
            # Staafdiagram vergelijking per criterium
            st.subheader("📈 Vergelijkende scores per criterium")
            fig1, ax1 = plt.subplots(figsize=(12, 6))
            melted_df = st.session_state.df[st.session_state.df["Locatie"].isin(selected_locs)].melt(
                id_vars=["Locatie"],
                value_vars=list(SCORE_LEGEND.keys()),
                var_name="Criterium",
                value_name="Score"
            )
            sns.barplot(
                data=melted_df,
                x="Criterium",
                y="Score",
                hue="Locatie",
                palette="viridis",
                ax=ax1
            )
            ax1.set_ylim(0, 5)
            ax1.legend(title="Locatie", bbox_to_anchor=(1.05, 1))
            plt.xticks(rotation=45)
            st.pyplot(fig1)
            
            # Totaalscore ranking
            st.subheader("🏆 Totaalscore ranking")
            total_scores = st.session_state.df[st.session_state.df["Locatie"].isin(selected_locs)].set_index("Locatie")[list(SCORE_LEGEND.keys())].sum(axis=1)
            
            # Tabel + staafdiagram in kolommen
            col1, col2 = st.columns([1, 2])
            with col1:
                st.dataframe(
                    total_scores.sort_values(ascending=False)
                    .to_frame("Totaalscore")
                    .style.background_gradient(cmap="YlGn")
                )
            
            with col2:
                fig2, ax2 = plt.subplots(figsize=(10, 4))
                sorted_scores = total_scores.sort_values(ascending=True)
                color_list = [SCORE_COLORS[min(5, max(1, round(score/(len(SCORE_LEGEND)*5*0.2))))] for score in sorted_scores]
                sorted_scores.plot(
                    kind='barh', 
                    color=color_list,
                    ax=ax2
                )
                ax2.set_title("Totaalscore vergelijking")
                ax2.set_xlabel("Score")
                ax2.set_xlim(0, len(SCORE_LEGEND)*5)
                
                # Voeg scorelabels toe
                for p in ax2.patches:
                    width = p.get_width()
                    ax2.text(width + 0.5, p.get_y() + p.get_height()/2,
                             f"{int(width)}",
                             ha='left', va='center')
                
                st.pyplot(fig2)
        else:
            st.warning("Selecteer minimaal 1 locatie")

# ======================
# SIDEBAR EXPORT AANPASSING
# ======================
with st.sidebar:
    st.subheader("Export")
    if not st.session_state.df.empty:
        # Aangepaste CSV export
        st.download_button(
            label="📥 Download CSV (puntkomma)",
            data=generate_clean_csv(st.session_state.df),
            file_name="locatie_scores.csv",
            mime="text/csv",
            help="Download met puntkomma als scheidingsteken voor betere compatibiliteit"
        )
        
        # PDF export
        if 'loc_select' in st.session_state:
            selected_location = st.session_state.loc_select
            if selected_location in st.session_state.df["Locatie"].values:
                if st.button("📄 Genereer PDF Rapport"):
                    with st.spinner("Rapport genereren..."):
                        pdf_bytes = generate_pdf(selected_location)
                        if pdf_bytes:
                            st.download_button(
                                label="⬇️ Download PDF",
                                data=pdf_bytes,
                                file_name=f"rapport_{selected_location}.pdf",
                                mime="application/pdf"
                            )
                st.caption("Genereer een uitgebreid PDF rapport voor de geselecteerde locatie")
        
        # Live totaalscore in sidebar
        st.markdown("---")
        st.subheader("Live Totaalscore")
        if 'loc_select' in st.session_state and st.session_state.loc_select in st.session_state.df["Locatie"].values:
            selected_location = st.session_state.loc_select
            current_scores = st.session_state.df[st.session_state.df["Locatie"] == selected_location][list(SCORE_LEGEND.keys())].values[0]
            totaal = sum(current_scores)
            max_score = len(SCORE_LEGEND) * 5
            
            st.markdown(f"""
            <div style="background: #f0f2f6; padding: 10px; border-radius: 5px;">
                <b>{selected_location}</b>
                <p style="font-size: 24px; margin: 5px 0; text-align: center;">
                    {totaal}<small>/{max_score}</small>
                </p>
                <div style="height: 10px; background: #e0e0e0; border-radius: 5px;">
                    <div style="width: {totaal/max_score*100}%; height: 100%; 
                         background: linear-gradient(90deg, #ff6b6b, #1b9e75); 
                         border-radius: 5px;"></div>
                </div>
                <p style="text-align: center; margin-top: 5px;">
                    {totaal/max_score:.0%} van maximaal
                </p>
            </div>
            """, unsafe_allow_html=True)
    else:
        st.info("Voeg locaties toe om te exporteren")
